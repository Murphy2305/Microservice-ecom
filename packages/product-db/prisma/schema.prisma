// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String
  shortDescription String
  description      String
  price            Int
  sizes            String[]
  colors           String[]
  images           Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  categorySlug     String
  category         Category @relation(fields: [categorySlug], references: [slug])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[]
}

/**
 * 🔹 Why PostgreSQL for Product Details?
 * Products usually have:
 * Structured, relational data (id, name, description, price, category, stock, etc.)
 * Relationships with categories, reviews, discounts, inventory.
 * Data that doesn’t change too frequently, but requires complex queries (filters, sorting, joins).
 * 👉 PostgreSQL is perfect here because:
 * Strong schema & constraints → ensures no inconsistent product data.
 * Advanced querying & indexing → great for searching/filtering (e.g., WHERE category = 'Shoes' AND price < 100).
 * Support for JSONB → if product metadata varies (like color/size), you can still store flexible fields.
 * ⚡ In short: Products = mostly stable, relational, searchable → PostgreSQL is ideal.
 * 🔹 Why MongoDB for Orders?
 * Orders are very different:
 * Each order can have a flexible schema (different items, shipping methods, payment info).
 * Orders are write-heavy (lots of inserts every time customers buy).
 * Orders are document-like (one big JSON object: { customer, items[], total, shipping, payment }).
 * Orders grow FAST → need horizontal scaling.
 * 👉 MongoDB is perfect here because:
 * Schema flexibility → no problem if tomorrow you add “gift message” or “discount code.”
 * Document model fits order naturally → store the whole order in one document.
 * High write throughput & scalability → great for handling thousands of concurrent orders.
 * Easier sharding & replication → scales better for massive order volumes.
 * ⚡ In short: Orders = flexible, write-heavy, JSON-like → MongoDB fits better.
 */
